object RealtimeEvent {
    type: String  # response.create, response.chunk, response.end
    response: {
        modalities: String[]  # ["text", "speech"]
        instructions: String
        voice: String
    }
}

object Message {
    content: String
    role: String  # user or assistant
}

object Conversation {
    messages: Message[]
    model: String
    temperature: Number
    max_tokens: Number
}

template GeneratePrompt(conversation: Conversation) -> RealtimeEvent {
    prompt: """
    You are a helpful AI assistant engaging in a conversation with the user.
    Previous messages:
    {{#each conversation.messages}}
    {{role}}: {{content}}
    {{/each}}

    Respond naturally and conversationally. Your response will be delivered through both text and speech.
    Use the voice specified in the response object.

    {{return_type}}
    """
}

main {
    template_args {
        messages: Message[]
        model: String
        temperature: Number
        max_tokens: Number
    }

    let conversation = Conversation(
        messages: $messages,
        model: $model,
        temperature: $temperature,
        max_tokens: $max_tokens
    );

    let prompt = GeneratePrompt(conversation: conversation);

    prompt {
        Create a response that will be delivered through both text and speech:
        {{prompt}}
    }
}
