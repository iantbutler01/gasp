object FileCreate {
    thoughts: String @description("Your thoughts about the change you are making given the state of the system. These should detail why this change is moving you closer to completing the task as stated in the users prompt.")
    step: String @description("An english description of the change you are making. This helps document the purpose of the file creation.")
    file: String @description("The name of the file you are creating.")
    content: String @description("The contents that will be written to the file.")
}

object FileDelete {
    step: String @description("An english description of the change you are making. This helps document the purpose of the deletion.")
    file_id: String @description("The numeric identifier of the file to delete, as displayed next to the file path within the <files> tags. Each open file has a unique ID that persists throughout the editing session.")
}

object FileEdit {
    thoughts: String @description("Your thoughts about the change you are making given the state of the system. These should detail why this change is moving you closer to completing the task as stated in the users prompt.")
    file_id: Number @description("The id of the file you want to edit as shown next to the file path between the <files> tags.")
    step: String @description("An english description of the change you are making. This helps document the purpose of the edit.")
    file: String @description("The name of the file you are editing.")
    lines_to_replace: String @description("The exact content of the lines of text to be replaced. These lines must exist within the content currently in the viewer state. Whitespace and linebreaks must be the same. Do not include the line number.")
    replace_text: String @description("The content of the lines of text doing the replacing. This field is absolutely required and contains the new content that will replace the specified lines. Do not include the line number.")
    id: String @description("A unique id representing the edit. This allows for tracking and referencing specific changes.")
}

object CreateFiles {
    name: String
    creates: FileCreate[]
}

object EditFiles {
    name: String
    edits: FileEdit[]
}

object DeleteFiles {
    name: String
    deletes: FileDelete[]
}

object OpenFile {
    name: String
    file: String @description("The path to the file you wish to open, these can be determined through the 'list_files' command.")
}

object SwitchFile {
    name: String
    file_id: String @description("The id of the file you want to switch to as shown next to the file path between the <files> tags.")
}

object ListFiles {
    name: String
    subpath: String @description("The directory subpath you want to list files under.")
}

object Finalize {
    name: String
}


union ToolCall = CreateFiles | EditFiles | DeleteFiles | OpenFile | SwitchFile | ListFiles | Finalize;

template ConstrainedPrompt(task: String, files: String, lines: Number, turns: Number, pinned_files: String, viewer_state: String) -> ToolCall[] {
    prompt: """
    Your goal is to efficiently make file changes in a highly constrained environment with only {{turns}} turns available. Each creation, edit, or deletion of a file costs one turn.

    Here is the task you need to perform:
    <task>
    {{task}}
    </task>

    Here are the files you can work with:
    <files>
    {{files}}
    </files>

    You'll be working with <lines>{{lines}}</lines> lines of code at a time, or the entire file if it's smaller.

    The viewer interface will show:
    - Task description
    - Available files
    - Current file content
    - Available tools
    - Remaining Turns

    Available Tools:
    1. File Operations (Cost 1 Turn):
    - create_files: Create a new file with specified content
    - edit_files: Make targeted changes to existing file content, can perform multiple edits across files in one action
    - delete_files: Remove a file from the project

    2. Navigation Operations (Free):
    - open_file: Open and view a file's contents
    - list_files: Show all available project files

    Tool Usage Guide:

    a) create_files:
    Required: Array[{file, content, step, thoughts}]
    Use for: Creating new files needed for the task

    b) edit_files:
    Required: Array[{file, lines_to_replace, replace_text, step, thoughts, id, file_id}]
    Use for: Making specific changes to existing files
    Note: Can only edit lines currently visible in viewer

    c) delete_files:
    Required: Array[{file_id, step}]
    Use for: Removing files when necessary

    d) open_file (Free):
    Required: file
    Use for: Viewing file contents

    e) list_files (Free):
    Required: none
    Use for: Finding available files

    f) finalize (Free):
    Required: none
    Use for: Marking task as complete when you're done with all changes

    Key Constraints:
    1. You have exactly {{turns}} turns total
    2. Only create_files, edit_files, and delete_files cost turns
    3. You cannot explore or analyze extensively
    4. Make changes with confidence based on the task requirements
    5. Context is cached between calls, so extensive navigation is unnecessary
    6. You must use at least one turn
    7. Cede control back to driver when turns are exhausted
    8. Use finalize when your changes are complete


    Example: Multiple edits with one call to edit_files:

    <code_review>
    Starting with base configuration class that needs multiple updates
    </code_review>

    (call create_files with {
    "creates": [
        {
        "thoughts": "Creating initial config class that we'll modify multiple times",
        "step": "Create base config", 
        "file": "src/config.py",
        "content": 'from dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass \nclass Config:\n    host: str\n    port: int'
        }
    ]
    })

    ╔════════════════════ FILES ═══════════════════╗
    │ 0: src/config.py                            │
    ╚══════════════════════════════════════════════╝

    <code_review>
    Now demonstrating multiple edits to same file in one command:
    1. Add validation method
    2. Add new fields
    3. Add string representation
    All in one edit_files call
    </code_review>

    (call edit_files with {
    "edits": [
        {
        "thoughts": "Need to add validation method first",
        "file_id": 0,
        "step": "Add validation method",
        "file": "src/config.py",
        "lines_to_replace": '@dataclass \nclass Config:\n    host: str\n    port: int',
        "replace_text": '@dataclass \nclass Config:\n    host: str\n    port: int\n    \n    def validate(self) -> bool:\n        if not self.host:\n            return False\n        if self.port < 1 or self.port > 65535:\n            return False\n        return True',
        "id": "add-validation"
        },
        {
        "thoughts": "Now adding new configuration fields",
        "file_id": 0,
        "step": "Add new fields with defaults",
        "file": "src/config.py",
        "lines_to_replace": 'class Config:\n    host: str\n    port: int\n    \n    def validate(self)',
        "replace_text": 'class Config:\n    host: str\n    port: int\n    debug: bool = False\n    log_level: str = "INFO"\n    max_connections: int = 100\n    \n    def validate(self)',
        "id": "add-fields"
        },
        {
        "thoughts": "Finally adding string representation",
        "file_id": 0,
        "step": "Add string representation",
        "file": "src/config.py",
        "lines_to_replace": '        if self.port < 1 or self.port > 65535:\n            return False\n        return True',
        "replace_text": '        if self.port < 1 or self.port > 65535:\n            return False\n        return True\n        \n    def __str__(self) -> str:\n        return f"Config(host={self.host}, port={self.port}, debug={self.debug}, level={self.log_level})"',
        "id": "add-str"
        }
    ]
    })

    ╔═══════════════ DIAGNOSTICS ════════════════╗
    ┌──────────────── Edit Results ──────────────┐
    │ SUCCESS: add-validation                    │
    │ SUCCESS: add-fields                        │
    │ SUCCESS: add-str                          │
    └────────────────────────────────────────────┘
    ╚════════════════════════════════════════════╝

    <code_review>
    All three edits succeeded:
    1. Added validation logic
    2. Added new fields with defaults
    3. Added string representation 
    Note how each edit built on the previous one in same command
    </code_review>

    (call finalize to complete task)


    Example: Complex multi create, edit and delete

    <code_review>
    Initial task analysis:
    Implementing a configuration system with:
    - Config file with settings
    - Parser class
    - Unit tests
    </code_review>

    (call create_files with {
    "creates": [
        {
        "step": "Creating base config file"
        }
    })

    step for item at index 0 is required for 'create_files', please try again with the correct parameters.
    file for item at index 0 is required for 'create_files', please try again with the correct parameters.
    content for item at index 0 is required for 'create_files', please try again with the correct parameters.

    <code_review>
    Fixing create command with all required fields
    </code_review>

    (call create_files with {
    "creates": [
        {
        "thoughts": "Need base config file first",
        "step": "Create config definition file",
        "file": "src/config/config.py",
        "content": 'from dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass Config:\n    debug: bool = False\n    log_level: str = "INFO"\n    port: int = 8080\n    host: str = "localhost"'
        }
    ]
    })

    ╔════════════════════ FILES ═══════════════════╗
    │ 0: src/config/config.py                      │
    ╚══════════════════════════════════════════════╝

    <code_review>
    Adding parser implementation and tests
    </code_review>

    (call create_files with {
    "creates": [
        {
        "thoughts": "Need parser to load config",
        "step": "Create config parser",
        "file": "src/config/parser.py", 
        "content": 'from pathlib import Path\nfrom .config import Config\nimport json\n\nclass ConfigParser:\n    def load(self, path: Path) -> Config:\n        with open(path) as f:\n            data = json.load(f)\n            return Config(**data)'
        },
        {
        "thoughts": "Need tests for parser",
        "step": "Create test file",
        "file": "src/config/tests/test_parser.py",
        "content": 'from ..parser import ConfigParser\nfrom ..config import Config\nimport pytest\n\ndef test_load_config():\n    parser = ConfigParser()\n    config = parser.load("test_config.json")\n    assert isinstance(config, Config)'
        }
    ]
    })

    ╔════════════════════ FILES ═══════════════════╗
    │ 0: src/config/config.py                      │
    │ 1: src/config/parser.py                      │
    │ 2: src/config/tests/test_parser.py          │
    ╚══════════════════════════════════════════════╝

    <code_review>
    Need to update tests with better validation
    </code_review>

    (call edit_files with {
    "edits": [
        {
        "thoughts": "Test needs to validate config values",
        "step": "Improve test assertions", 
        "file": "src/config/tests/test_parser.py",
        "file_id": 2,
        "lines_to_replace": 'def test_load_config():\n    parser = ConfigParser()\n    config = parser.load("test_config.json")\n    assert isinstance(config, Config)',
        "replace_text": 'def test_load_config(tmp_path):\n    config_file = tmp_path / "test_config.json"\n    config_file.write_text(\'{"debug": true, "log_level": "DEBUG", "port": 9000}\')\n    \n    parser = ConfigParser()\n    config = parser.load(config_file)\n    \n    assert isinstance(config, Config)\n    assert config.debug is True\n    assert config.log_level == "DEBUG"\n    assert config.port == 9000\n    assert config.host == "localhost"  # Default value',
        "id": "improve-test"
        }
    ])

    ╔═══════════════ DIAGNOSTICS ════════════════╗
    ┌──────────────── Edit Results ──────────────┐
    │ SUCCESS: improve-test                      │
    └────────────────────────────────────────────┘
    ╚════════════════════════════════════════════╝

    <code_review>
    Adding error handling to parser
    </code_review>

    (call edit_files with {
    "edits": [
        {
        "thoughts": "Parser needs error handling",
        "step": "Add validation and error handling",
        "file": "src/config/parser.py",
        "file_id": 1,
        "lines_to_replace": '    def load(self, path: Path) -> Config:\n        with open(path) as f:\n            data = json.load(f)\n            return Config(**data)',
        "replace_text": '    def load(self, path: Path) -> Config:\n        if not path.exists():\n            raise FileNotFoundError(f"Config file not found: {path}")\n            \n        try:\n            with open(path) as f:\n                data = json.load(f)\n                return Config(**data)\n        except json.JSONDecodeError as e:\n            raise ValueError(f"Invalid JSON in config file: {e}")\n        except TypeError as e:\n            raise ValueError(f"Invalid config values: {e}")',
        "id": "add-error-handling"
        }
    ]
    })

    ╔═══════════════ DIAGNOSTICS ════════════════╗
    ┌──────────────── Edit Results ──────────────┐
    │ SUCCESS: add-error-handling                │
    └────────────────────────────────────────────┘
    ╚════════════════════════════════════════════╝

    <code_review>
    Cleaning up unused test file
    </code_review>

    (call delete_files with {
    "deletes": [
        {
        "file_id": 99,
        "step": "Remove old test file"
        }
    ]
    })

    Invalid file id 99 for element 0. Valid files are:
    0: src/config/config.py
    1: src/config/parser.py
    2: src/config/tests/test_parser.py

    <code_review>
    Fixing delete command with valid file ID
    </code_review>

    (call delete_files with {
    "deletes": [
        {
        "file_id": 2,
        "step": "Remove test file to rewrite"
        }
    ]
    })

    ╔═══════════════ DIAGNOSTICS ════════════════╗
    ┌──────────────── Delete Results ────────────┐
    │ SUCCESS: Deleted src/config/tests/test_parser.py
    └────────────────────────────────────────────┘
    ╚════════════════════════════════════════════╝

    <code_review>
    Implementation complete with:
    - Config dataclass for settings
    - Parser with error handling
    - Integration tests with fixtures
    Demonstrated both validation failures and successful operations
    </code_review>

    (call finalize to complete task)


    Terminology notes:
    If the user references pinned files, this means files that will always be present in the listed open files at the start.
    -----------------------------Pinned File Context----------------------------------
    {{pinned_files}}
    Note: Pinned file context here will not change even if you edit the actual file later on. Consider this as starting reference material.
    ----------------------------------------------------------------------------------
    {{viewer_state}}

    {{return_type}}
    """
}

main {
    template_args {
        files: String,
        lines: Number,
        pinned_files: String,
        viewer_state: String,
        turns: Number,
        task: String
    }

    let res = ConstrainedPrompt(files: $files, lines: $lines, pinned_files: $pinned_files, viewer_state: $viewer_state, turns: $turns, task: $task);

    prompt {
        {{res}}
    }
}