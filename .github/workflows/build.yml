name: Build, Test, and Publish Wheels

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

jobs:
  build:
    name: Build Wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, aarch64]
        python-version:
          ["3.7.16", "3.8.16", "3.9.16", "3.10.16", "3.11.11", "3.12.8"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rosetta for macOS ARM64 (if needed)
        if: matrix.os == 'macos-latest' && matrix.arch == 'aarch64' && contains('3.8.16 3.9.16', matrix.python-version)
        run: |
          softwareupdate --install-rosetta --agree-to-license

      - name: Determine Python architecture
        id: arch
        run: |
          ARCH=${{ matrix.arch }}
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "aarch64" && "${{ matrix.python-version }}" =~ ^(3.8.16|3.9.16)$ ]]; then
            ARCH=x64
          fi
          echo "arch=$ARCH" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ env.arch }}
          cache: false

      - name: Install dependencies
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip maturin twine

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rust target for ARM (if necessary)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Build Wheels
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "aarch64" ]]; then
            maturin build --release --manylinux 2_28 --target aarch64-unknown-linux-gnu
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "x86_64" ]]; then
            maturin build --release --manylinux 2_28
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            maturin build --release
          fi

      - name: Upload Wheels
        uses: actions/upload-artifact@v3
        with:
          name: built-wheels
          path: target/wheels/*.whl

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v3
        with:
          name: built-wheels
          path: wheels

      - name: Publish to PyPI
        run: |
          python -m pip install --upgrade pip twine
          twine upload wheels/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
