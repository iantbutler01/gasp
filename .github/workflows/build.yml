name: Build, Test, and Publish Wheels

on:
  push:
    branches: [release]

jobs:
  ##########################################
  # 1) Ubuntu builds using cibuildwheel Docker (x86_64 + arm64)
  ##########################################
  build-ubuntu:
    name: Build on Ubuntu (x86_64 + arm64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: "3.8"
            arch: "x86_64"
          - python-version: "3.9"
            arch: "x86_64"
          - python-version: "3.10"
            arch: "x86_64"
          - python-version: "3.11"
            arch: "x86_64"
          - python-version: "3.11"
            arch: "aarch64"
          - python-version: "3.12"
            arch: "x86_64"
          - python-version: "3.12"
            arch: "aarch64"
      fail-fast: false

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Python for host tooling
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install cibuildwheel
        run: python -m pip install --upgrade pip cibuildwheel==2.22.0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build wheels
        run: |
          PYTHON_VERSION_NO_DOTS=$(echo '${{ matrix.python-version }}' | tr -d .)
          echo "Building for cp${PYTHON_VERSION_NO_DOTS}-*"
          export CIBW_BUILD="cp${PYTHON_VERSION_NO_DOTS}-*"
          cibuildwheel --output-dir dist/
          ls dist/
        env:
          CIBW_SKIP: "pp* musllinux* *-win32 *-ppc64le *-s390x *i686"
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_BEFORE_BUILD: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y &&
            export PATH=$HOME/.cargo/bin:$PATH &&
            pip install maturin
          CIBW_ENVIRONMENT: PATH=$HOME/.cargo/bin:$PATH

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu-${{ matrix.python-version }}-${{ matrix.arch }}
          path: dist/*.whl

  ########################################################
  # 2) Older Python on Intel macOS (3.8, 3.9, 3.10) - x64
  ########################################################
  build-macos-older:
    name: Build older Python on Intel macOS
    runs-on: macos-13
    strategy:
      matrix:
        python-version: ["3.8.16", "3.9.16", "3.10.12"]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install missing dependencies
        run: |
          brew install gettext
          echo "DYLD_LIBRARY_PATH=$(brew --prefix gettext)/lib" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install dependencies
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip maturin

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Wheels
        run: maturin build --release --interpreter python

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-older-${{ matrix.python-version }}-x64
          path: target/wheels/*.whl

  ################################################
  # 3) Newer Python on macOS-latest (3.11, 3.12)
  ################################################
  build-macos-newer:
    name: Build newer Python on macOS-latest
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.11.6", "3.12.0"]
        architecture: ["arm64", "x64"]
      fail-fast: false

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install missing dependencies
        run: |
          brew install gettext
          echo "DYLD_LIBRARY_PATH=$(brew --prefix gettext)/lib" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install dependencies
        run: |
          python -m ensurepip
          python -m pip install --upgrade pip maturin

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Wheels
        run: maturin build --release --interpreter python

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-newer-${{ matrix.python-version }}-${{ matrix.architecture }}
          path: target/wheels/*.whl

  ##########################################
  # 4) Publish job that combines all wheels
  ##########################################
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos-older, build-macos-newer]
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels

      - name: Flatten wheel directory structure
        run: |
          mkdir -p ./all-wheels
          find ./wheels -name '*.whl' -exec mv {} ./all-wheels \;

      - name: Check wheel count
        run: |
          echo "Built wheels:"
          ls ./all-wheels
          test $(ls ./all-wheels/*.whl | wc -l) -gt 0

      - name: Publish to PyPI
        run: |
          python -m pip install --upgrade pip twine==6.0.1
          twine upload ./all-wheels/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
